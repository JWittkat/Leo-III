package leo.datastructures.internal.terms


import scala.language.implicitConversions
import scala.Some

import leo.datastructures.Pretty
import leo.datastructures.internal.{Type, Signature, HOLBinaryConnective}


/**
 * Abstract interface for generation of various terms that can be
 * displayed in the internal language.
 * Terms are generated by
 *
 * {{{s,t ::= i (bound symbol)
 *       | c (constant symbol)
 *       | λ:tau.s (term abstraction)
 *       | s t (term application)
 *       | Λs (type abstraction)
 *       | s tau (type application)}}}
 *
 * where `c` is some symbol (constant) and `tau` is a type (see `Type`).
 *
 * @author Alexander Steen
 * @since 21.05.2014
 * @note Updated 02.06.2014 Cleaned up method set, lambda terms always have types
 * @note Updated 09.06.2014 Added pattern matcher for terms, added definition expansion
 */
abstract class Term extends Pretty {
  // Predicates on terms
  def isAtom: Boolean
  def isTermApp: Boolean
  def isTermAbs: Boolean
  def isTypeApp: Boolean
  def isTypeAbs: Boolean

  def is(term: Term): Boolean = term == this
  def is(symbol: Signature#Key): Boolean = false

  // Queries on terms
  def ty: Type
  def freeVars: Set[Term]
  def boundVars: Set[Term] = ??? // return the bound vars (that are copies, right?)
  def symbolsOfType(ty: Type) = freeVars.filter(_.ty == ty)
  def headSymbol: Term
  // Substitutions
  def substitute(what: Term, by: Term): Term
  def substitute(what: List[Term], by: List[Term]): Term = {
    require(what.length == by.length, "Substitution list do not match in length.")
    what.zip(by).foldRight(this)({case ((w,b), t:Term) => t.substitute(w,b)})
  }
  protected[internal] def instantiateBy(by: Type) = instantiate(1,by)
  protected[internal] def instantiate(scope: Int, by: Type): Term


  def δ_expandable: Boolean
  def head_δ_expand: Term
  def full_δ_expand: Term

  // Other operations
  /** Returns true iff the term is well-typed. */
  def typeCheck: Boolean

  /** Return the β-nf of the term */
  def betaNormalize: Term
  protected[terms] def normalize(subst: Subst): Term
  /** Alias for `betaNormalize` */
  def β_nf: Term = betaNormalize

  /** Right-folding on terms. */
  def foldRight[A](symFunc: Signature#Key => A)
             (boundFunc: (Type, Int) => A)
             (absFunc: (Type, A) => A)
             (appFunc: (A,A) => A)
             (tAbsFunc: A => A)
             (tAppFunc: (A, Type) => A): A

  def expandDefinitions(rep: Int): Term
  def expandAllDefinitions = expandDefinitions(-1)

  protected[internal] def inc(scopeIndex: Int): Term


  protected[internal] def closure(subst: Subst): Term

  // Syntactic sugar operations
//  /** Creates an (term) application term */
//  def apply(arg: Term): Term = Term.mkTermApp(this,arg)
//  /** Creates an (type) application term */
//  def apply(arg: Type): Term = Term.mkTypeApp(this,arg)
}


object Term {
  import leo.datastructures.internal.terms.spine.TermImpl

  def mkAtom(id: Signature#Key): Term = TermImpl.mkAtom(id)
  def mkBound(t: Type, scope: Int): Term = TermImpl.mkBound(t,scope)

  def mkTermApp(func: Term, arg: Term): Term = TermImpl.mkTermApp(func, arg)
  def mkTermApp(func: Term, args: Seq[Term]): Term = TermImpl.mkTermApp(func, args)
  def mkTermAbs(t: Type, body: Term): Term = TermImpl.mkTermAbs(t, body)

  def mkTypeApp(func: Term, arg: Type): Term = TermImpl.mkTypeApp(func, arg)
  def mkTypeApp(func: Term, args: Seq[Type]): Term = TermImpl.mkTypeApp(func, args)
  def mkTypeAbs(body: Term): Term = TermImpl.mkTypeAbs(body)

  // Pretty operators

  /** Creates a new term abstraction with parameter type `hd` and body `body` */
  def \(hd: Type)(body: Term): Term = mkTermAbs(hd, body)
  /** Creates a new term abstraction with parameter type `hd` and body `body`. Pretty variant of `\` */
  def λ(hd: Type)(body: Term): Term = mkTermAbs(hd, body)
  /** Creates a nested term abstraction of the form λ:hd.(λ:h1.(λ:h2.(...(λ:hn,body)..))) for hi ∈ hds */
  def \(hd: Type, hds: Type*)(body: Term): Term = {
    \(hd)(hds.foldRight(body)(\(_)(_)))
  }
  /** Creates a nested term abstraction of the form λ:hd.(λ:h1.(λ:h2.(...(λ:hn,body)..))) for hi ∈ hds */
  def λ(hd: Type, hds: Type*)(body: Term): Term = {
    \(hd)(hds.foldRight(body)(\(_)(_)))
  }

  /** Creates a new type abstracted term  */
  def /\(body: Term): Term = mkTypeAbs(body)
  /** Creates a new type abstracted term. Pretty variant of `/\` */
  def Λ(body: Term): Term = mkTypeAbs(body)

  implicit def intToBoundVar(in: (Int, Type)): Term = mkBound(in._2,in._1)
  implicit def intsToBoundVar(in: (Int, Int)): Term = mkBound(in._2,in._1)
  implicit def keyToAtom(in: Signature#Key): Term = mkAtom(in)
}

/**
 * Pattern for matching bound symbols in terms (i.e. De-Bruijn-Indices). Usage:
 * {{{
 * t match {
 *  case Bound(ty,scope) => println("Matched bound symbol of lambda-scope "
 *                                  + scope.toString + " with type "+ ty.pretty)
 *  case _               => println("something else")
 * }
 * }}}
 */
object Bound {
  import spine.{BoundIndex,SNil}
  def unapply(t: Term): Option[(Type, Int)] = t match {
    case naive.BoundNode(ty,scope) => Some((ty,scope))
    case spine.Root(BoundIndex(ty, scope), SNil) => Some((ty, scope))
    case _ => None
  }
}

/**
 * Pattern for matching constant symbols in terms (i.e. symbols in signature). Usage:
 * {{{
 * t match {
 *  case Symbol(constantKey) => println("Matched constant symbol "+ constantKey.toString)
 *  case _                   => println("something else")
 * }
 * }}}
 */
object Symbol {
  import spine.{UiAtom, DefAtom, SNil}

  def unapply(t: Term): Option[Signature#Key] = t match {
    case naive.SymbolNode(k)         => Some(k)
    case spine.Root(DefAtom(k),SNil) => Some(k)
    case spine.Root(UiAtom(k),SNil)  => Some(k)
    case _ => None
  }
}

/**
 * Pattern for matching (term) applications in terms (i.e. terms of form `(s t)`). Usage:
 * {{{
 * t match {
 *  case s @@@ t => println("Matched application. Left: " + s.pretty
 *                                            + " Right: " + t.pretty)
 *  case _       => println("something else")
 * }
 * }}}
 */
object @@@ extends HOLBinaryConnective {
  val key = Integer.MIN_VALUE // just for fun!
  override def unapply(t: Term): Option[(Term,Term)] = t match {
    case naive.ApplicationNode(l,r) => Some((l,r))
    case _ => None
  }
  override def apply(left: Term, right: Term): Term = Term.mkTermApp(left,right)
}

object ∙ {
  import spine.{Root, Redex}
  import spine.TermImpl.{headToTerm}
  def unapply(t: Term): Option[(Term, Seq[Either[Term, Type]])] = t match {
    case Root(h, sp) => Some((headToTerm(h), sp.asTerms))
    case Redex(expr, sp) => Some((expr, sp.asTerms))
  }

  def apply(left: Term, right: Seq[Either[Term, Type]]): Term = spine.TermImpl.mkApp(left, right)
}

/**
 * Pattern for matching type applications in terms (i.e. terms of form `(s ty)` where `ty` is a type). Usage:
 * {{{
 * t match {
 *  case s :::: ty => println("Matched type application. Left: " + s.pretty
 *                                                  + " Right: " + ty.pretty)
 *  case _         => println("something else")
 * }
 * }}}
 */
object @@@@ {

  def unapply(t: Term): Option[(Term,Type)] = t match {
    case naive.TypeApplicationNode(l,r) => Some((l,r))
    case _ => None
  }
}

/**
 * Pattern for matching (term) abstractions in terms (i.e. terms of form `(\(ty)(s))` where `ty` is a type). Usage:
 * {{{
 * t match {
 *  case ty :::> s => println("Matched abstraction. Type of parameter: " + ty.pretty
 *                                                           + " Body: " + s.pretty)
 *  case _         => println("something else")
 * }
 * }}}
 */
object :::> extends Function2[Type, Term, Term] {

  def unapply(t: Term): Option[(Type,Term)] = t match {
    case naive.AbstractionNode(ty,body) => Some((ty,body))
    case spine.TermAbstr(ty, body)      => Some((ty, body))
    case _ => None
  }

  /** Construct abstraction λty.body */
  override def apply(ty: Type, body: Term): Term = Term.mkTermAbs(ty, body)
}

/**
 * Pattern for matching (type) abstractions in terms (i.e. terms of form `/\(s)`). Usage:
 * {{{
 * t match {
 *  case TypeLambda(s) => println("Matched type abstraction. Body: " + s.pretty)
 *  case _             => println("something else")
 * }
 * }}}
 */
object TypeLambda {

  def unapply(t: Term): Option[Term] = t match {
    case naive.TypeAbstractionNode(body) => Some(body)
    case spine.TypeAbstr(body)           => Some(body)
    case _ => None
  }
}

