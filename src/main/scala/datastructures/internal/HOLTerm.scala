package datastructures.internal

/**
 * Abstract interface for generation of various terms that can be
 * displayed in the internal language.
 * Terms are generated by
 *
 * {{{s,t ::= c (Constant)
 *       | \c.t (term abstraction)
 *       | s t (term application)
 *       | /\a.t (type abstraction)
 *       | s tau (type application)}}}
 *
 * where `c` is some symbol (constant) and `tau` is a type (see `HOLType`).
 *
 * @see [[datastructures.internal.HOLType]]
 */
trait HOLTerm {

  def mkConst(identifier: Int): Term
  def mkTermApp(left: Term, right: Term): Term
  def mkTermAbs(hd: Variable, body: Term): Term
  def mkTypeApp(left: Type, right: Type): Term
  def mkTypeAbs(hd: Variable, body: Term): Term

  def \(hd: Variable, body: Term): Term

  def /\(hd: Variable, body: Term): Term
}
