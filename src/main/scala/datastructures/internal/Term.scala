package datastructures.internal

import datastructures.Pretty


/**
 * Abstract interface for generation of various terms that can be
 * displayed in the internal language.
 * Terms are generated by
 *
 * {{{s,t ::= c (Atom)
 *       | \c:tau.t (term abstraction)
 *       | s t (term application)
 *       | /\a.t (type abstraction)
 *       | s tau (type application)}}}
 *
 * where `c` is some symbol (constant) and `tau` is a type (see `HOLType`).
 *
 * @author Alexander Steen
 * @since 21.05.2014
 * @note Updated 02.06.2014 Cleaned up method set, lambda terms always have types
 */
abstract class Term extends Pretty {
  // Predicates on terms
  val isAtom: Boolean
  val isTermApp: Boolean
  val isTermAbs: Boolean
  val isTypeApp: Boolean
  val isTypeAbs: Boolean

  def is(term: Term): Boolean = term == this
  def is(symbol: Signature#Key): Boolean = false

  // Queries on terms
  def ty: Type
  def freeVars: Set[Term]
  def symbolsOfType(ty: Type) = freeVars.filter(_.ty == ty)
  def topLevelSymbol: Option[Term] = ???
  // Substitutions
  def substitute(what: Term, by: Term): Term
  def substitute(what: List[Term], by: List[Term]): Term = {
    require(what.length == by.length, "Substitution list do not match in length.")
    what.zip(by).foldRight(this)({case ((w,b), t:Term) => t.substitute(w,b)})
  }
  protected[internal] def instantiateBy(by: Type) = instantiate(1,by)
  protected[internal] def instantiate(scope: Int, by: Type): Term
  // Other operations
  def betaNormalize: Term

  def foldRight[A](symFunc: Signature#Key => A)
             (boundFunc: (Type, Int) => A)
             (absFunc: (Type, A) => A)
             (appFunc: (A,A) => A)
             (tAbsFunc: A => A)
             (tAppFunc: (A, Type) => A): A

  def expandDefinitions(rep: Int): Term = {
    import Term.{mkAtom, mkBound, mkTermAbs, mkTermApp, mkTypeAbs, mkTypeApp}
    val sig = Signature.get
    def minus = {in: Int => in match {case -1 => -1 case a => a-1}}
    rep match {
      case 0 => this
      case n => {
        val sym: Signature#Key => Term
        = { key =>
          sig.meta(key).defn match {
            case None => mkAtom(key)
            case Some(defn) => defn.expandDefinitions(minus(rep))
          }
        }
        val bound = mkBound(_, _)
        val abs: (Type, Term) => Term
        = { (ty, term) =>
          mkTermAbs(ty, term.expandDefinitions(rep))
        }
        val app: (Term, Term) => Term
        = { (left, right) =>
          mkTermApp(left.expandDefinitions(rep), right.expandDefinitions(rep))
        }
        val tAbs: Term => Term
        = { body =>
          mkTypeAbs(body.expandDefinitions(rep))
        }
        val tApp: (Term, Type) => Term
        = { (body, ty) =>
          mkTypeApp(body.expandDefinitions(rep), ty)
        }
        foldRight(sym)(bound)(abs)(app)(tAbs)(tApp)

      }
    }
  }
  def expandAllDefinitions = expandDefinitions(-1)

  protected[internal] def inc(scopeIndex: Int): Term
}


object Term {
  def mkAtom = SymbolNode(_)
  def mkBound = BoundNode(_,_)
  def mkTermApp = ApplicationNode(_,_)
  def mkTermApp(func: Term, args: List[Term]): Term = args.foldRight(func)((arg,f) => mkTermApp(f,arg))
  def mkTermAbs = AbstractionNode(_, _)
  def mkTypeApp = TypeApplicationNode(_,_)
  def mkTypeAbs = TypeAbstractionNode(_)

  def \(hd: Type)(body: Term): Term = mkTermAbs(hd, body)

  def /\(body: Term): Term = mkTypeAbs(body)
}

