/**
 *
 * This class starts an interactive shell for leoIII
 *
 * Created by Max Wisniewski on 3/28/14.
 */


import agents.impl.NormalClauseAgent
import blackboard.SimpleBlackboard
import scala.tools.nsc.Settings
import scala.tools.nsc.interpreter.ILoop
import leoshell.{leoshell => MyIntp}

/**
 * An interactive shell, that allows the user to directly manipulate the formulas generated by LeoIII
 *
 * @author{Max Wisniewski}
 */
object LeoIII extends App {
  val settings = new Settings
  settings.usejavacp.value = true
  settings.deprecation.value = true
  settings.Yreplsync.value = true

  // No JLineReader Added to Project at the moment
  // settings.Xnojline.value = true

  val console = new LeoILoop()
  console.process(settings)
}

class LeoILoop extends ILoop {
  override def prompt = "leoIII> "

  addThunk {
    intp.beQuietDuring {
      intp.addImports("java.lang.Math._")
      MyIntp.imports.foreach(intp.addImports(_))

      // Shorten Names for representation
      intp.addImports("datastructures.tptp.Commons._")
      intp.addImports("datastructures.tptp.Commons.{AnnotatedFormula=>Formula}")
    }
  }

  /**
   * Printing our own welcome message
   */
  override def printWelcome {
    echo(MyIntp.welcome)
  }

  /**
   * If something should be done in the start up phase
   */
  override def loop(){
      consoleInitialize(true)

      // Initializes leoIII
      programInitialization()
      super.loop()
  }

  /**
   * Initializes the program independently of interpreter or fixed usage
   */
  def programInitialization() {
    // Initializes a testing thread for the simplification agent
    (new NormalClauseAgent(normalization.Simplification)).register(SimpleBlackboard)
  }

  /**
   * Initializes the console of leo3
   */
  def consoleInitialize(quite : Boolean) {
    if(quite)
    intp.beQuietDuring {
      MyIntp.init(this)
      MyIntp.commandList.foreach{case (_,c) => c.initText.foreach(intp.interpret(_))}
      intp.interpret("def exit = sys.exit(0)")
    }
    else {
      MyIntp.init(this)
      MyIntp.commandList.foreach{case (_,c) => c.initText.foreach(intp.interpret(_))}
      intp.interpret("def exit = sys.exit(0)")
    }
  }
}
