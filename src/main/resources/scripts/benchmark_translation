#!/bin/bash

## Parameter:
## Directory that contains problems (possibly with subdirectories etc)

PROBDIR=$1
RESDIR="$1/RESULTS"
mkdir -p $RESDIR
TIMEOUT=30

PROVERS=("~/bin/leo/bin/leo -t $TIMEOUT %PROB"
"~/bin/satallax/bin/satallax.opt -t $TIMEOUT %PROB")
PSHORTNAMES=("leo"
"satallax")
TRANSLATIONS=("translate %PROB ARG1"
"translate %PROB ARG2"
)


function call_prover() {
  erg=$( TIMEFORMAT='%R'; time ($1  |  grep -Po '(?<=SZS status\s)[^\s]*' | head -1) 2>&1 )
 # result=$($erg | cut -d " " -f 1)
 # time=$($erg | cut -d " " -f 2)
  result=$(echo "$erg" | head -n 1)
  time=$(echo "$erg" | head -n 2 | tail -n 1)
  echo  -e "$result\t$time\t$2"
}

### Call a function f that calls a ATP on a problem and gives the time and SZS
### f Parameter: Prover, Timeout, translation function, input problem (original untranslated)
### f Output: SZS, Time
### This function is called on a series of problems, possibly with different translations per problem

for problem in "$PROBDIR"/*.p; do
  basename=$(basename $problem)
  ## translate the problem according to translation algorithm
  for ((i = 0; i < ${#TRANSLATIONS[@]}; i++)) do
    translation=${TRANSLATIONS[$i]}
    echo "${translation/"%PROB"/$problem} > $RESDIR/${basename:0:(-2)}_tr${i}.p 2> $RESDIR/ERROR"
  done
    
  for ((j = 0; j < ${#PROVERS[@]}; j++)); do
    
    resultname="$RESDIR/${basename:0:(-2)}_${PSHORTNAMES[$j]}.result"
    
    prover=${PROVERS[$j]}
    ## solve Original problem first      
    call="./translate"
    #call=${prover/"%PROB"/${problem}}
    (call_prover "./translate" "-1") >> "$resultname"
    
    
    ## run prover on each translation
    for ((i = 0; i < ${#TRANSLATIONS[@]}; i++)) do
      call="./translate"
      #call=${prover/"%PROB"/"$RESDIR/${basename:0:(-2)}_tr${i}.p"}
      (call_prover $call $i) >> "$resultname"
    done
    
  done 

  
done
